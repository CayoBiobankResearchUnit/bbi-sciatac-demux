#!/usr/bin/env python3

import sys
import re
import csv


column_name_values = [ 'n5_wells', 'n5_indexes',
                       'n7_wells', 'n7_indexes',
                       'p5_wells', 'p5_columns',
                       'p7_wells', 'p7_rows',
                       'sample_name', 'genome' ]


def parse_column_name( str, column_name_list, error_string ):
  if( not str.lower() in column_name_values ):
    error_string += '  %s' % ( str )
    return( column_name_list, error_string )
  str = str.lower()
  if( str == 'sample_name' ):
    column_name_dict = { 'type': 'sample_name', 'format': None }
  elif( str == 'genome' ):
    column_name_dict = { 'type': 'genome', 'format': None }
  else:
    mobj = re.match( '([np][57])_(wells|indexes|rows|columns)', str )
    column_name_dict = { 'type': mobj.group( 1 ), 'format': mobj.group( 2 ) }
  column_name_list.append( column_name_dict )
  return( column_name_list, error_string )


def check_column_names( column_name_list ):
  columns_required = { 'n5': 0, 'n7': 0, 'p5': 0, 'p7': 0, 'sample_name': 0, 'genome': 0 }
  for column_name_dict in column_name_list:
    columns_required[column_name_dict['type']] += 1
  error_flag = 0
  for column_name in columns_required:
    if( columns_required[column_name] != 1 ):
      print( 'error: column name \'%s\' %s' % ( column_name, 'occurs more than once' if( columns_required[column_name] ) else 'missing' ) )
      error_flag = 1
  if( error_flag ):
    sys.exit( -1 )
  return( 0 )


def parse_header( row_header ):
  column_name_list = []
  error_string = ''
  for str in row_header:
    parse_column_name( str, column_name_list, error_string )
  check_column_names( column_name_list )
  return( column_name_list )


def well_to_index( plate, row, column, across_row_first=True ):
  """
  Convert a well specification to a plate index (well P1:A01=1 to P4:H12=384).

  Args:
    plate              integer plate number between 1 and 4
    row                character row (A-H)
    column             integer column number (1-12)
    across_row_first   bool index increases by one as a row is traversed; that is,
                       moving from column to column along row
  Returns:
    index: an integer well index (1-384)

  """
  if( plate < 1 or plate > 4  or
      not row in [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H' ] or
      column < 1 or column > 12 ):
    print( 'Error: bad well values: plate: %d  row: %s  col: %d' % ( plate, row, col ), file=sys.stderr )
    sys.exit( -1 )
  irow = ord( row ) - ord( 'A' )
  icol = column - 1
  if( across_row_first ):
    well_index = irow * 12 + icol + 1
  else:
    well_index = icol * 8 + irow + 1
  return( well_index + ( plate - 1 ) * 96 )


def make_index_string( index_list ):
  index_string = ''
  index_list.sort()
  index_prev = None
  index1 = None
  for i in index_list:
    if( index_prev ):
      if( i == index_prev ):
        continue
      elif( i > index_prev + 1 ):
        if( len( index_string ) > 0 ):
          index_string += ','
        if( index_prev > index1 ):
          index_string += '%d-%d' % ( index1, index_prev )
        else:
          index_string += '%d' % ( index_prev )
        index1 = i
    else:
      index1 = i
    index_prev = i
  # last index in list
  if( len( index_string ) > 0 ):
    index_string += ','
  if( index_prev > index1 ):
    index_string += '%d-%d' % ( index1, index_prev )
  else:
    index_string += '%d' % ( index_prev )
  return( index_string )


def parse_indexes( string_in, element_coordinates, max_index = 96 ):
  index_list = []
  string_in = re.sub( '\s', '', string_in )
  for index_range in string_in.split( ',' ):
    mobj = re.match( '([0-9]+)([-:]([0-9]+))?$', index_range )
    if( not mobj ):
      print( 'Error: bad index range \'%s\'' % ( index_range ), file=sys.stderr )
      sys.exit( -1 )
    index1 = int( mobj.group( 1 ) )
    if( index1 < 1 or index1 > max_index ):
      print( 'Error: bad index range \'%s\'' % ( index_range ), file=sys.stderr )
      sys.exit( -1 )
    index2 = int( mobj.group( 3 ) ) if mobj.group( 2 ) else index1
    if( index2 < 1 or index2 > max_index ):
      print( 'Error: bad index range \'%s\'' % ( index_range ), file=sys.stderr )
      sys.exit( -1 )
    if( index2 < index2 ):
      print( 'Error: bad index range \'%s\'' % ( index_range ), file=sys.stderr )
      sys.exit( -1 )
    for i in range( index1, index2 + 1 ):
      index_list.append( i )
  return( make_index_string( index_list ) )


def parse_wells( string_in, element_coordinates, across_row_first=True, max_index = 96 ):
  index_list = []
  string_in = re.sub( '\s', '', string_in )
  for well_range in string_in.split( ',' ):
    expand_plate_flag = False
#    mobj = re.match( '(P([1-4])-)?([A-H])([01]?[0-9])([-:](P([1-4])-)?([A-H])([01]?[0-9]))?$', well_range )
    mobj = re.match( '(P([1-4*])[-:])?([A-H])([0]?[1-9][0-2]?)([-:](P([1-4*])[-:])?([A-H])([0]?[1-9][0-2]?))?$', well_range )
    if( not mobj ):
      print( 'Error: bad well or well range \'%s\'' % ( well_range ), file=sys.stderr )
      sys.exit( -1 )
    #
    # first well
    row1 = mobj.group( 3 )
    col1 = int( mobj.group( 4 ) )
    if( col1 < 1 or col1 > 12 ):
      print( 'Error: bad well: \'%s\'' % ( string_in ), file=sys.stderr )
      sys.exit( -1 )
    # is plate specified?
    if( mobj.group( 1 ) ):
      if( mobj.group( 2 ) == '*' ):
        plate1_list = [ 1, 2, 3, 4 ]
      else:
        plate1_list = [ int( mobj.group( 2 ) ) ]
    else:
      plate1_list = [ 1 ]
    #
    if( mobj.group( 5 ) ):
      if( ( mobj.group( 2 ) == None ) != ( mobj.group( 7 ) == None ) ):
        print( 'Error: either both or neither well in a range must have plates specified: \'%s\'' % ( string_in ), file=sys.stderr )
        sys.exit( -1 )
      if( ( mobj.group( 2 ) == '*' ) != ( mobj.group( 7 ) == '*' ) ):
        print( 'Error: either both or neither well in a range must have plates specified as \'*\': \'%s\'' % ( string_in ), file=sys.stderr )
        sys.exit( -1 )

      # second well, if this is a range
      row2 = mobj.group( 8 )
      col2 = int( mobj.group( 9 ) )
      if( col2 < 1 or col2 > 12 ):
        print( 'Error: bad well: \'%s\'' % ( string_in ), file=sys.stderr )
        sys.exit( -1 )
      # is plate specified?
      if( mobj.group( 6 ) ):
        if( mobj.group( 7 ) == '*' ):
          plate2_list = [ 1, 2, 3, 4 ]
        else:
          plate2_list = [ int( mobj.group( 7 ) ) ]
      else:
        plate2_list = [ 1 ]
      #
    else:
      plate2_list = plate1_list
      row2 = row1
      col2 = col1
    #
    for plate1, plate2 in zip( plate1_list, plate2_list ):
      index1 = well_to_index( plate1, row1, col1, across_row_first )
      index2 = well_to_index( plate2, row2, col2, across_row_first )
      if( index2 < index1 ):
        print( 'Error: bad well range: \'%s\'' % ( string_in ), file=sys.stderr )
        sys.exit( -1 )
      for i in range( index1, index2 + 1 ):
        index_list.append( i )
  return( make_index_string( index_list ) )


def parse_rows( string_in, element_coordinates ):
  index_list = []
  string_in = re.sub( '\s', '', string_in )
  for row_range in string_in.split( ',' ):
    mobj = re.match( '([A-H])([-:]([A-H]))?$', row_range )
    if( not mobj ):
      print( 'Error: bad row or row range \'%s\'' % ( row_range ), file=sys.stderr )
      sys.exit( -1 )
    row1 = mobj.group( 1 )
    row1_index = well_to_index( 1, row1, 1, True )
    row2_index = row1_index
    if( mobj.group( 2 ) ):
      row2 = mobj.group( 3 )
      row2_index = well_to_index( 1, row2, 1, True )
      if( row2_index < row1_index ):
        print( 'Error: bad row range: \'%\'' % ( string_in ), file=sys.stderr )
        sys.exit( -1 )
    index1 = row1_index
    index2 = row2_index + 11
    for i in range( index1, index2 + 1 ):
      index_list.append( i )
  return( make_index_string( index_list ) )


def parse_columns( string_in, element_coordinates ):
  index_list = []
  string_in = re.sub( '\s', '', string_in )
  for col_range in string_in.split( ',' ):
    mobj = re.match( '([1-9][0-2]?)([-:]([1-9][0-2]?))?$', col_range )
    col1 = int( mobj.group( 1 ) )
    col1_index = well_to_index( 1, 'A', col1, False )
    col2_index = col1_index
    if( col1 < 1 or col1 > 12 ):
      print( 'Error: bad column value: \'%d\'' % ( col1 ), file=sys.stderr )
      sys.exit( -1 )
    if( mobj.group( 2 ) ):
      col2 = int( mobj.group( 3 ) )
      if( col2 < 1 or col2 > 12 ):
        print( 'Error: bad column value: \'%d\'' % ( col1 ), file=sys.stderr )
        sys.exit( -1 )
      if( col1 > col2 ):
        print( 'Error: bad column range: \'%s\'' % ( string_in ), file=sys.stderr )
        sys.exit( -1 )
      col2_index = well_to_index( 1, 'A', col2, False )
    index1 = col1_index
    index2 = col2_index + 7
    for i in range( index1, index2 + 1 ):
      index_list.append( i )
  return( make_index_string( index_list ) )


def read_samplesheet( file ):
  samplesheet = {}
  csv_rows = csv.reader( file, delimiter=',', quotechar='"')
  row_header = csv_rows.__next__()
  column_name_list = parse_header( row_header )
#  for column_name_dict in column_name_list:
#    print( 'type: %s  format: %s' % ( column_name_dict['type'], column_name_dict['format'] ) )
  element_coordinates = [ 1, 1 ]
  for irow, row_elements in enumerate( csv_rows ):
#    print( '%s' % ( ' -- '.join( row_elements ) ) )
    icol = 0
    for element_string, column_name_dict in zip( row_elements, column_name_list ):
      icol += 1
      element_coordinates = [ irow, icol ]
      if( column_name_dict['type'] == 'n7' ):
        max_index = 384
        if( column_name_dict['format'] == 'indexes' ):
          n7_index_string = parse_indexes( element_string, element_coordinates, max_index )
        else:
          n7_index_string = parse_wells( element_string, element_coordinates, True, max_index )
      elif( column_name_dict['type'] == 'n5' ):
        max_index = 384
        if( column_name_dict['format'] == 'indexes' ):
          n5_index_string = parse_indexes( element_string, element_coordinates, max_index )
        else:
          n5_index_string = parse_wells( element_string, element_coordinates, False, max_index )
      elif( column_name_dict['type'] == 'p7' ):
        max_index = 96
        if( column_name_dict['format'] == 'indexes' ):
          p7_index_string = parse_indexes( element_string, element_coordinates, max_index )
        else:
          p7_index_string = parse_rows( element_string, element_coordinates )
      elif( column_name_dict['type'] == 'p5' ):
        max_index = 96
        if( column_name_dict['format'] == 'indexes' ):
          p5_index_string = parse_indexes( element_string, element_coordinates, max_index )
        else:
          p5_index_string = parse_columns( element_string, element_coordinates )
      elif( column_name_dict['type'] == 'sample_name' ):
          sample_name = element_string
      elif( column_name_dict['type'] == 'genome' ):
          genome = element_string
    #
#    print( 'sample: %s' % ( sample_name ) )
#    print( 'genome: %s' % ( genome ) )
#    print( 'n7 indexes: %s' % ( n7_index_string ) )
#    print( 'n5 indexes: %s' % ( n5_index_string ) )
#    print( 'p7 indexes: %s' % ( p7_index_string ) )
#    print( 'p5 indexes: %s' % ( p5_index_string ) )
    print( '%s\t%s:%s:%s:%s\t%s' % ( sample_name, n7_index_string, p7_index_string, p5_index_string, n5_index_string, genome ) )
  return( samplesheet )


fn = 'ATAC3-01_samplesheet_v2.sheet_2.edit.csv'
samplesheet = read_samplesheet( open( fn, newline='' ) )



